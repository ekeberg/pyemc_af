# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_emc_cuda')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_emc_cuda')
    _emc_cuda = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_emc_cuda', [dirname(__file__)])
        except ImportError:
            import _emc_cuda
            return _emc_cuda
        if fp is not None:
            try:
                _mod = imp.load_module('_emc_cuda', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _emc_cuda = swig_import_helper()
    del swig_import_helper
else:
    import _emc_cuda
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def set_to_value(array, size, value):
    return _emc_cuda.set_to_value(array, size, value)
set_to_value = _emc_cuda.set_to_value

def masked_set(array, mask, size, value):
    return _emc_cuda.masked_set(array, mask, size, value)
masked_set = _emc_cuda.masked_set

def int_to_float_pointer(pointer_int):
    return _emc_cuda.int_to_float_pointer(pointer_int)
int_to_float_pointer = _emc_cuda.int_to_float_pointer

def int_to_int_pointer(pointer_int):
    return _emc_cuda.int_to_int_pointer(pointer_int)
int_to_int_pointer = _emc_cuda.int_to_int_pointer

def cuda_expand_model(model, model_x, model_y, model_z, slices, image_x, image_y, rotations, number_of_rotations, coordinates):
    return _emc_cuda.cuda_expand_model(model, model_x, model_y, model_z, slices, image_x, image_y, rotations, number_of_rotations, coordinates)
cuda_expand_model = _emc_cuda.cuda_expand_model

def cuda_insert_slices(model, model_weights, model_x, model_y, model_z, slices, image_x, image_y, slice_weights, rotations, number_of_rotations, coordinates, interpolation):
    return _emc_cuda.cuda_insert_slices(model, model_weights, model_x, model_y, model_z, slices, image_x, image_y, slice_weights, rotations, number_of_rotations, coordinates, interpolation)
cuda_insert_slices = _emc_cuda.cuda_insert_slices

def cuda_insert_slices_partial(model, model_weights, model_x_tot, model_x_max, model_x_min, model_y_tot, model_y_max, model_y_min, model_z_tot, model_z_max, model_z_min, slices, image_x, image_y, slice_weights, rotations, number_of_rotations, coordinates, interpolation):
    return _emc_cuda.cuda_insert_slices_partial(model, model_weights, model_x_tot, model_x_max, model_x_min, model_y_tot, model_y_max, model_y_min, model_z_tot, model_z_max, model_z_min, slices, image_x, image_y, slice_weights, rotations, number_of_rotations, coordinates, interpolation)
cuda_insert_slices_partial = _emc_cuda.cuda_insert_slices_partial

def cuda_update_slices(slices, number_of_rotations, patterns, number_of_patterns, image_x, image_y, responsabilities):
    return _emc_cuda.cuda_update_slices(slices, number_of_rotations, patterns, number_of_patterns, image_x, image_y, responsabilities)
cuda_update_slices = _emc_cuda.cuda_update_slices

def cuda_calculate_responsabilities(patterns, number_of_patterns, slices, number_of_rotations, image_x, image_y, responsabilities, sigma):
    return _emc_cuda.cuda_calculate_responsabilities(patterns, number_of_patterns, slices, number_of_rotations, image_x, image_y, responsabilities, sigma)
cuda_calculate_responsabilities = _emc_cuda.cuda_calculate_responsabilities

def cuda_calculate_responsabilities_sparse(pattern_start_indices, pattern_indices, pattern_values, number_of_patterns, slices, number_of_rotations, image_x, image_y, responsabilities, slice_sums, log_factorial_table):
    return _emc_cuda.cuda_calculate_responsabilities_sparse(pattern_start_indices, pattern_indices, pattern_values, number_of_patterns, slices, number_of_rotations, image_x, image_y, responsabilities, slice_sums, log_factorial_table)
cuda_calculate_responsabilities_sparse = _emc_cuda.cuda_calculate_responsabilities_sparse

def cuda_calculate_responsabilities_poisson(patterns, number_of_patterns, slices, number_of_rotations, image_x, image_y, responsabilities, log_factorial_table):
    return _emc_cuda.cuda_calculate_responsabilities_poisson(patterns, number_of_patterns, slices, number_of_rotations, image_x, image_y, responsabilities, log_factorial_table)
cuda_calculate_responsabilities_poisson = _emc_cuda.cuda_calculate_responsabilities_poisson

def cuda_calculate_responsabilities_poisson_scaling(patterns, number_of_patterns, slices, number_of_rotations, image_x, image_y, scalings, responsabilities, log_factorial_table):
    return _emc_cuda.cuda_calculate_responsabilities_poisson_scaling(patterns, number_of_patterns, slices, number_of_rotations, image_x, image_y, scalings, responsabilities, log_factorial_table)
cuda_calculate_responsabilities_poisson_scaling = _emc_cuda.cuda_calculate_responsabilities_poisson_scaling

def cuda_calculate_scaling_poisson(patterns, number_of_patterns, slices, number_of_rotations, number_of_pixels, scalings):
    return _emc_cuda.cuda_calculate_scaling_poisson(patterns, number_of_patterns, slices, number_of_rotations, number_of_pixels, scalings)
cuda_calculate_scaling_poisson = _emc_cuda.cuda_calculate_scaling_poisson

def cuda_update_slices_sparse(slices, number_of_rotations, pattern_start_indices, pattern_indices, pattern_values, number_of_patterns, image_x, image_y, responsabilities):
    return _emc_cuda.cuda_update_slices_sparse(slices, number_of_rotations, pattern_start_indices, pattern_indices, pattern_values, number_of_patterns, image_x, image_y, responsabilities)
cuda_update_slices_sparse = _emc_cuda.cuda_update_slices_sparse

def cuda_rotate_model(model, rotated_model, model_x, model_y, model_z, rotation):
    return _emc_cuda.cuda_rotate_model(model, rotated_model, model_x, model_y, model_z, rotation)
cuda_rotate_model = _emc_cuda.cuda_rotate_model
# This file is compatible with both classic and new-style classes.


